  1  * Entrypoint in Docker?
  2  * CMD vs Entrypoint ?
  3  * ADD and Copy ?
        COPY and ADD 
        “Both copy and add instruction is used to copy files and directories from 
        host machine build location to the image and the container created from it.”
    
        ADD supports extra source formats 
            - If the source is a compressed file then ADD will automatically uncompress it 
                in the destination.
          - If the source is a downloadable link then ADD will automatically download the 
            file in the destination.
        COPY <source_path_from_build_context> <destination_inside_image>      
        ADD <source_path_from_build_context> <destination_inside_image>

  4  * At the time of docker build –t cmd execution if you press CTRL+C, what happens ?
      If you press CTRL+C during the docker build process, it sends an interrupt signal (SIGINT) to the build process.It's generally a good practice to avoid interrupting the docker build process unless 
      necessary.
  5  * Docker file size is 2GB and need to reduce the size ? what will you do ?
      a)Use a Smaller Base Image:
         Choose a smaller base image. Alpine Linux is a popular choice for its small size.
      b)Minimize Layers:
        Combine multiple commands into a single RUN instruction to reduce the number of layers.
      c)Multi-Stage Builds:
        Use multi-stage builds to reduce the final image size. Build your application in one image and then copy only the necessary artifacts to a smaller base image.
  6  * Diff bw layers and image ?
      In the context of Docker, an image consists of a series of layers, and these layers represent the file system changes made at different steps in the Dockerfile.
         Layers:
          * A layer in Docker is the basic building block of an image.
          * Each instruction in a Dockerfile creates a new layer.
         Image:
          * An image is composed of multiple layers stacked on top of each other.
          * An image is a lightweight, stand-alone, executable package that includes everything needed to run a piece of software.
  7  * If you give multiple entrypoints in Docker file, which will be executed and what happened to previous ones ?
       If you provide multiple ENTRYPOINT instructions, only the last one in the Dockerfile will take effect. Each ENTRYPOINT instruction replaces the previous one.
       If you want to provide multiple commands to be executed as the entrypoint, you can use the shell form of the ENTRYPOINT instruction:
        Dockerfile
        Copy code
        FROM ubuntu:latest
        ENTRYPOINT echo "Hello" && echo "World"
  8  * By default in which user the container starts to execute cmds ?
       root user.
  9  * Docker socket ?
        Docker daemon socket, is a communication endpoint that Docker clients use to interact with the Docker daemon. The Docker daemon (dockerd) is a background process responsible for managing Docker 
        containers on a system.
        The default Docker socket is a Unix domain socket, typically located at /var/run/docker.sock
  10 * what is container Runtime in Docker ?
       a container runtime is responsible for running and managing containers. The default container runtime used by Docker is called containerd. It handles tasks such as container creation, container 
       management, and image distribution.
  11 * How do you mount a file system in docker container ?
       To mount a file system into a Docker container, you can use the -v or --volume option when running the docker run command. This option allows you to specify a volume.
       docker run -v /host/path:/container/path my_image
  12 * Write a Dockerfile and push to dockerhub.
       a) docker tag <old_image> <new image>
       b) docker login 
       c) docker push <username>/<repo_name>:<tagname>
  13 * docker file structure
        it typically consists of a series of instructions that are used to build a Docker image.
         # Use a base image
          FROM base_image:tag
        # Set the working directory inside the container
          WORKDIR /path/to/working/directory
        # Copy files or directories from the host to the container
          COPY source destination
        # Run a command in the container (executed during image build)
          RUN command
        # Set environment variable(s)
          ENV key=value
        # Expose a port that the container will listen on at runtime
          EXPOSE port_number
        # Define the default command to run when the container starts
          CMD ["executable", "param1", "param2"]
        # Additional metadata (not executed during image build)
          LABEL key="value"
        # Specify the user that the image should run as
          USER username
        # Specify volume(s) for persistent data
          VOLUME /path/to/volume
        # Define an entrypoint, which is the default command to run when the container starts
          ENTRYPOINT ["executable", "param1", "param2"]
  14 * multistage dockerfile script 
          that allows you to build a smaller and more efficient Docker image by using multiple FROM instructions in a single Dockerfile. ach FROM instruction starts a new build stage, and you can copy              only the necessary artifacts from the previous stage.
  15 * dockerfile to install java 
        # Use a base image with Java
          FROM openjdk:11-jre-slim
        # Set the working directory
          WORKDIR /app
        # Copy your Java application JAR file
          COPY your-app.jar .
        # Set the default command to run your application
          CMD ["java", "-jar", "your-app.jar"]
  16 * From command
  17 * Publish & Expose
  18 * command to publish & expose 
       docker run -p host_port:container_port your_imag
  19 * docker container
        A container is a set of isolated processes and its resources in a host machine which is isolated from all the other process”. 
  20 * diff b/w cmd & entrypoint?
        Both CMD and ENTRYPOINT are used to define the default execution command of the container .
         - If we use both CMD and ENTRYPOINT in the same Dockerfile, then ENTRYPOINT gets the highest priority and the command defined using CMD will be as parameters to ENTRYPOINT.
         - CMD can be completely overridden at the runtime But ENTRYPOINT can't be overridden at the runtime.
  21 * difference between cmd and run
         - CMD
            used to define the default execution command of the container (the command which will be executed in the container as main process).
         - RUN 
            Normal shell command or the commands supported by the base image are executed using this instruction.
            we can have n number of RUN in a single Dockerfile.
  22 * If previous night the container had stopped working and terminated, how will you collect logs when you even dont have volume attach to it
        docker logs <container_name_or_id>
  23 * What are security measures you took to secure the docker image
      a) Use Official Base Images:
      b) Keep Images and Software Up-to-Date:
      c) Secure Dockerfile and Build Context:
      d) Secure Dockerfile and Build Context:
      e) Use COPY Instead of ADD:
  24 * Which scanning mechanism you are using,to scan the images regularly
  25 * Do you use docker swam?
        Docker Swarm, often referred to as Docker Swarm Mode, is a native clustering and orchestration solution for Docker. It allows you to create and manage a swarm of Docker nodes, turning them into a 
        single, virtual Docker host. This enables you to deploy and manage containerized applications at scale, distributing them across a cluster of machines.
  26 * Dockerfile
      Dockerfile is used to create custom images by using any stock image or other image as base image. In Dockerfile we can write some set of instructions to update any image.”
      To create image from Dockerfile
       [docker build -t my_ubuntu ].
  29 * How u create docker image from Dockerfile?
        docker build -t your_image_name .
  30 * Difference between docker image and container?
       a Docker image is a static, immutable blueprint that defines an application, while a Docker container is a dynamic, runnable instance of that image. Images are used to create containers, and 
       containers are the actively running instances.
  31 * Namespace cgroup
  32 * I have created a custom container , how can I deliver it to the other users?
  33 * Where u store docker images in project?
  34 * What is DTR, docker trust registry
  35 * write the docker file with all the commands and explain
  36 * docker file versioning
  37 * docker file structure
  38 * multistage dockerfile script 
  39 * dockerfile to install java 
  40 * From command
  41 * Publish & Expose
  42 * command to publish & expose
  43 * docker container
  44 * Docker multiple stage build
  45 * docker cmd for trouble container
  46 * docker swam 
  47 * docker compose
  48 * how you maintain docker and k8s in your production
  49 * difference between docker and k8s
  50 * Best practices for writing Dockerfile.
  51 * how will u scan ur docker images for security vulnerabilities?
  52 * Docker layers ;top layer is read & write
  53 * Have you used any kind of docker concept.
  54 * where you fiting this docker concept.. which network you will be used ?
  55 * difference between CMD & ENTRYPOINT
  56 * COPY & ADD
  57 * common kind of issues you have faced when you creating a docker image?
  58 * created container using cmd docker -p & my container crashed how you are going to troubleshoot
  59 * container having a java based application when i am restarting everything working fine but when i was working to pass same command in cmd its not restarting what could be the issues
  60 * am using plane vanila docker machine not using any networking concept still container is not up.
  61 * one of my client having a requirement they donot want to host their image on a docker registry. they want to containerization custom registry.(client want secured image)
  62 * To copy files/docker image  from one machine to another machine. one machine is build vm another is plain vm bcoz my container is running out of memeory. is it possible? whats the command
  63 * VM vs Docker
  64 * Why cant we use AWS AMI instead of Docker Image
  65 * Dockerfile directives and some sceneries based on entry point
  66 * Docker file size is 2GB and need to reduce the size ? what will you do ?
  67 * Diff bw layers and image ?
  68 * If you give multiple entrypoints in Docker file, which will be executed and what happened to previous ones ?
  69 * By default in which user the container starts to execute cmds ?
  70 * dockerfile structure
  71 * docker networks
  72 * command to attach docker volume to container
  73 * create basic container cmd
  74 * whats the use of docker ps
  75 * difference between k8s & dockerswam
  76 * what are the services in docker swam
  77 * with dockers what kind of application you used java based/ python based
  78 * What's docker file
  79 * CMD vs entrypoint
  80 * What docker port mapping
  81 * What's -p
  82 * Dockerfile
  83 * Docker many questions on network, docker commands , docker troubleshooting,  multistage build
  84 * State full and stateless containers
  85 * Difference between them
  86 * Tell usecase
  87 * In dockerfile run the application which command u use - entrypoint, CMd
  88 * What is containerization
  89 * How you give root permission inside docker file
  90 * Dockerfile -  explain each command what you have written
  91 * Docker commands
  92 * How will you make your application in docker access externally
  93 * Write multistage docker file
  94 * Diff between CMD and entry point
  95 * How to find background process in docker containers
  96 * what is docker swarm & Compose
  97 * Which applications are running in your docker containers
  98 * what is entry poind and command in in docker
  99 * write docker file
 
